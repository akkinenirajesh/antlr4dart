// Generated from Calc.g by antlr4dart
part of calc;

class CalcLexer extends Lexer {

  static const int T__9 = 1, T__8 = 2, T__7 = 3, T__6 = 4, T__5 = 5, T__4 = 6, 
                   T__3 = 7, T__2 = 8, T__1 = 9, T__0 = 10, INTEGER = 11, 
                   DECIMAL = 12, WS = 13;

  static const String _serializedAtn =  "\x03\u0430\ud6d1\u8206\uad2d\u4417"
  	"\uaef1\u8d80\uaadd\x02\x0f\x4e\x08\x01\x04\x02\x09\x02\x04\x03\x09\x03"
  	"\x04\x04\x09\x04\x04\x05\x09\x05\x04\x06\x09\x06\x04\x07\x09\x07\x04"
  	"\x08\x09\x08\x04\x09\x09\x09\x04\x0a\x09\x0a\x04\x0b\x09\x0b\x04\x0c"
  	"\x09\x0c\x04\x0d\x09\x0d\x04\x0e\x09\x0e\x04\x0f\x09\x0f\x03\x02\x03"
  	"\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06"
  	"\x03\x06\x03\x07\x03\x07\x03\x08\x03\x08\x03\x09\x03\x09\x03\x0a\x03"
  	"\x0a\x03\x0b\x03\x0b\x03\x0b\x03\x0c\x06\x0c\x37\x0a\x0c\x0d\x0c\x0e"
  	"\x0c\x38\x03\x0d\x06\x0d\x3c\x0a\x0d\x0d\x0d\x0e\x0d\x3d\x03\x0d\x03"
  	"\x0d\x06\x0d\x42\x0a\x0d\x0d\x0d\x0e\x0d\x43\x03\x0e\x03\x0e\x03\x0f"
  	"\x06\x0f\x49\x0a\x0f\x0d\x0f\x0e\x0f\x4a\x03\x0f\x03\x0f\x02\x02\x10"
  	"\x03\x03\x05\x04\x07\x05\x09\x06\x0b\x07\x0d\x08\x0f\x09\x11\x0a\x13"
  	"\x0b\x15\x0c\x17\x0d\x19\x0e\x1b\x02\x1d\x0f\x03\x02\x03\x04\x02\x0b"
  	"\x0c\x22\x22\x50\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02"
  	"\x07\x03\x02\x02\x02\x02\x09\x03\x02\x02\x02\x02\x0b\x03\x02\x02\x02"
  	"\x02\x0d\x03\x02\x02\x02\x02\x0f\x03\x02\x02\x02\x02\x11\x03\x02\x02"
  	"\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02"
  	"\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1d\x03\x02\x02\x02\x03\x1f\x03"
  	"\x02\x02\x02\x05\x21\x03\x02\x02\x02\x07\x23\x03\x02\x02\x02\x09\x26"
  	"\x03\x02\x02\x02\x0b\x28\x03\x02\x02\x02\x0d\x2a\x03\x02\x02\x02\x0f"
  	"\x2c\x03\x02\x02\x02\x11\x2e\x03\x02\x02\x02\x13\x30\x03\x02\x02\x02"
  	"\x15\x32\x03\x02\x02\x02\x17\x36\x03\x02\x02\x02\x19\x3b\x03\x02\x02"
  	"\x02\x1b\x45\x03\x02\x02\x02\x1d\x48\x03\x02\x02\x02\x1f\x20\x07\x60"
  	"\x02\x02\x20\x04\x03\x02\x02\x02\x21\x22\x07\x2b\x02\x02\x22\x06\x03"
  	"\x02\x02\x02\x23\x24\x07\x52\x02\x02\x24\x25\x07\x4b\x02\x02\x25\x08"
  	"\x03\x02\x02\x02\x26\x27\x07\x47\x02\x02\x27\x0a\x03\x02\x02\x02\x28"
  	"\x29\x07\x2d\x02\x02\x29\x0c\x03\x02\x02\x02\x2a\x2b\x07\x2f\x02\x02"
  	"\x2b\x0e\x03\x02\x02\x02\x2c\x2d\x07\x2c\x02\x02\x2d\x10\x03\x02\x02"
  	"\x02\x2e\x2f\x07\x2a\x02\x02\x2f\x12\x03\x02\x02\x02\x30\x31\x07\x31"
  	"\x02\x02\x31\x14\x03\x02\x02\x02\x32\x33\x07\x6e\x02\x02\x33\x34\x07"
  	"\x70\x02\x02\x34\x16\x03\x02\x02\x02\x35\x37\x05\x1b\x0e\x02\x36\x35"
  	"\x03\x02\x02\x02\x37\x38\x03\x02\x02\x02\x38\x36\x03\x02\x02\x02\x38"
  	"\x39\x03\x02\x02\x02\x39\x18\x03\x02\x02\x02\x3a\x3c\x05\x1b\x0e\x02"
  	"\x3b\x3a\x03\x02\x02\x02\x3c\x3d\x03\x02\x02\x02\x3d\x3b\x03\x02\x02"
  	"\x02\x3d\x3e\x03\x02\x02\x02\x3e\x3f\x03\x02\x02\x02\x3f\x41\x07\x30"
  	"\x02\x02\x40\x42\x05\x1b\x0e\x02\x41\x40\x03\x02\x02\x02\x42\x43\x03"
  	"\x02\x02\x02\x43\x41\x03\x02\x02\x02\x43\x44\x03\x02\x02\x02\x44\x1a"
  	"\x03\x02\x02\x02\x45\x46\x04\x32\x3b\x02\x46\x1c\x03\x02\x02\x02\x47"
  	"\x49\x09\x02\x02\x02\x48\x47\x03\x02\x02\x02\x49\x4a\x03\x02\x02\x02"
  	"\x4a\x48\x03\x02\x02\x02\x4a\x4b\x03\x02\x02\x02\x4b\x4c\x03\x02\x02"
  	"\x02\x4c\x4d\x08\x0f\x02\x02\x4d\x1e\x03\x02\x02\x02\x07\x02\x38\x3d"
  	"\x43\x4a\x03\x02\x03\x02";

  final Atn atn = AtnSimulator.deserialize(_serializedAtn);

  final sharedContextCache = new PredictionContextCache();

  final List<String> modeNames = [
    "DEFAULT_MODE"
  ];

  final List<String> tokenNames = [
    "'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
    "'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
    "'\r'"
  ];

  final List<String> ruleNames = [
    "T__9", "T__8", "T__7", "T__6", "T__5", "T__4", "T__3", "T__2", "T__1", 
    "T__0", "INTEGER", "DECIMAL", "DIGIT", "WS"
  ]; 
  	
  CalcLexer(StringSource input) : super(input) {
    var _decisionToDfa = new List<Dfa>(atn.numberOfDecisions);
    for (int i = 0; i < atn.numberOfDecisions; i++) {
      _decisionToDfa[i] = new Dfa(atn.getDecisionState(i), i);
    }
    interpreter = new LexerAtnSimulator(atn, _decisionToDfa, sharedContextCache, this);
  }

  String get serializedAtn => _serializedAtn;

  String get grammarFileName => "Calc.g";
}