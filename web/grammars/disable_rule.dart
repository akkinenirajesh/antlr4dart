// Generated from DisableRule.g by antlr4dart
part of disable_rule;

class DisableRule extends Lexer {

  static const int E1 = 1, E2 = 2, ID = 3, WS = 4;

  static const String _serializedAtn =  "\x03\u0430\ud6d1\u8206\uad2d\u4417"
  	"\uaef1\u8d80\uaadd\x02\x06\x22\x08\x01\x04\x02\x09\x02\x04\x03\x09\x03"
  	"\x04\x04\x09\x04\x04\x05\x09\x05\x03\x02\x03\x02\x03\x02\x03\x02\x03"
  	"\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03"
  	"\x03\x03\x03\x04\x06\x04\x1b\x0a\x04\x0d\x04\x0e\x04\x1c\x03\x05\x03"
  	"\x05\x03\x05\x03\x05\x02\x02\x06\x03\x03\x05\x04\x07\x05\x09\x06\x03"
  	"\x02\x03\x04\x02\x0c\x0c\x22\x22\x22\x02\x03\x03\x02\x02\x02\x02\x05"
  	"\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\x09\x03\x02\x02\x02\x03"
  	"\x0b\x03\x02\x02\x02\x05\x12\x03\x02\x02\x02\x07\x1a\x03\x02\x02\x02"
  	"\x09\x1e\x03\x02\x02\x02\x0b\x0c\x07\x67\x02\x02\x0c\x0d\x07\x70\x02"
  	"\x02\x0d\x0e\x07\x77\x02\x02\x0e\x0f\x07\x6f\x02\x02\x0f\x10\x03\x02"
  	"\x02\x02\x10\x11\x06\x02\x02\x02\x11\x04\x03\x02\x02\x02\x12\x13\x07"
  	"\x67\x02\x02\x13\x14\x07\x70\x02\x02\x14\x15\x07\x77\x02\x02\x15\x16"
  	"\x07\x6f\x02\x02\x16\x17\x03\x02\x02\x02\x17\x18\x06\x03\x03\x02\x18"
  	"\x06\x03\x02\x02\x02\x19\x1b\x04\x63\x7c\x02\x1a\x19\x03\x02\x02\x02"
  	"\x1b\x1c\x03\x02\x02\x02\x1c\x1a\x03\x02\x02\x02\x1c\x1d\x03\x02\x02"
  	"\x02\x1d\x08\x03\x02\x02\x02\x1e\x1f\x09\x02\x02\x02\x1f\x20\x03\x02"
  	"\x02\x02\x20\x21\x08\x05\x02\x02\x21\x0a\x03\x02\x02\x02\x04\x02\x1c"
  	"\x03\x08\x02\x02";

  final Atn atn = AtnSimulator.deserialize(_serializedAtn);

  final sharedContextCache = new PredictionContextCache();

  final List<String> modeNames = [
    "DEFAULT_MODE"
  ];

  final List<String> tokenNames = [
    "'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'"
  ];

  final List<String> ruleNames = [
    "E1", "E2", "ID", "WS"
  ]; 
  	
  DisableRule(StringSource input) : super(input) {
    var _decisionToDfa = new List<Dfa>(atn.numberOfDecisions);
    for (int i = 0; i < atn.numberOfDecisions; i++) {
      _decisionToDfa[i] = new Dfa(atn.getDecisionState(i), i);
    }
    interpreter = new LexerAtnSimulator(atn, _decisionToDfa, sharedContextCache, this);
  }

  String get serializedAtn => _serializedAtn;

  String get grammarFileName => "DisableRule.g";

  bool semanticPredicate(RuleContext localContext, int ruleIndex, int predIndex) {
    switch (ruleIndex) {
      case 0: return _E1SemanticPredicate(localContext, predIndex);
      case 1: return _E2SemanticPredicate(localContext, predIndex);
    }
    return true;
  }

  bool _E2SemanticPredicate(RuleContext localContext, int predIndex) {
    switch (predIndex) {
      case 1: return true;
    }
    return true;
  }

  bool _E1SemanticPredicate(RuleContext localContext, int predIndex) {
    switch (predIndex) {
      case 0: return false;
    }
    return true;
  }

}