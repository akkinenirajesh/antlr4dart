// Generated from IfThenElse.g by antlr4dart
part of if_then_else;

class IfThenElseLexer extends Lexer {

  static const int T__5 = 1, T__4 = 2, T__3 = 3, T__2 = 4, T__1 = 5, T__0 = 6, 
                   ID = 7, WS = 8;

  static const String _serializedAtn =  "\x03\u0430\ud6d1\u8206\uad2d\u4417"
  	"\uaef1\u8d80\uaadd\x02\x0a\x37\x08\x01\x04\x02\x09\x02\x04\x03\x09\x03"
  	"\x04\x04\x09\x04\x04\x05\x09\x05\x04\x06\x09\x06\x04\x07\x09\x07\x04"
  	"\x08\x09\x08\x04\x09\x09\x09\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03"
  	"\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03"
  	"\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06"
  	"\x03\x07\x03\x07\x03\x08\x06\x08\x2d\x0a\x08\x0d\x08\x0e\x08\x2e\x03"
  	"\x09\x06\x09\x32\x0a\x09\x0d\x09\x0e\x09\x33\x03\x09\x03\x09\x02\x02"
  	"\x0a\x03\x03\x05\x04\x07\x05\x09\x06\x0b\x07\x0d\x08\x0f\x09\x11\x0a"
  	"\x03\x02\x03\x04\x02\x0b\x0c\x22\x22\x38\x02\x03\x03\x02\x02\x02\x02"
  	"\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\x09\x03\x02\x02\x02"
  	"\x02\x0b\x03\x02\x02\x02\x02\x0d\x03\x02\x02\x02\x02\x0f\x03\x02\x02"
  	"\x02\x02\x11\x03\x02\x02\x02\x03\x13\x03\x02\x02\x02\x05\x15\x03\x02"
  	"\x02\x02\x07\x1a\x03\x02\x02\x02\x09\x1d\x03\x02\x02\x02\x0b\x22\x03"
  	"\x02\x02\x02\x0d\x29\x03\x02\x02\x02\x0f\x2c\x03\x02\x02\x02\x11\x31"
  	"\x03\x02\x02\x02\x13\x14\x07\x7d\x02\x02\x14\x04\x03\x02\x02\x02\x15"
  	"\x16\x07\x76\x02\x02\x16\x17\x07\x6a\x02\x02\x17\x18\x07\x67\x02\x02"
  	"\x18\x19\x07\x70\x02\x02\x19\x06\x03\x02\x02\x02\x1a\x1b\x07\x6b\x02"
  	"\x02\x1b\x1c\x07\x68\x02\x02\x1c\x08\x03\x02\x02\x02\x1d\x1e\x07\x67"
  	"\x02\x02\x1e\x1f\x07\x6e\x02\x02\x1f\x20\x07\x75\x02\x02\x20\x21\x07"
  	"\x67\x02\x02\x21\x0a\x03\x02\x02\x02\x22\x23\x07\x74\x02\x02\x23\x24"
  	"\x07\x67\x02\x02\x24\x25\x07\x76\x02\x02\x25\x26\x07\x77\x02\x02\x26"
  	"\x27\x07\x74\x02\x02\x27\x28\x07\x70\x02\x02\x28\x0c\x03\x02\x02\x02"
  	"\x29\x2a\x07\x7f\x02\x02\x2a\x0e\x03\x02\x02\x02\x2b\x2d\x04\x63\x7c"
  	"\x02\x2c\x2b\x03\x02\x02\x02\x2d\x2e\x03\x02\x02\x02\x2e\x2c\x03\x02"
  	"\x02\x02\x2e\x2f\x03\x02\x02\x02\x2f\x10\x03\x02\x02\x02\x30\x32\x09"
  	"\x02\x02\x02\x31\x30\x03\x02\x02\x02\x32\x33\x03\x02\x02\x02\x33\x31"
  	"\x03\x02\x02\x02\x33\x34\x03\x02\x02\x02\x34\x35\x03\x02\x02\x02\x35"
  	"\x36\x08\x09\x02\x02\x36\x12\x03\x02\x02\x02\x05\x02\x2e\x33\x03\x08"
  	"\x02\x02";

  final Atn atn = AtnSimulator.deserialize(_serializedAtn);

  final sharedContextCache = new PredictionContextCache();

  final List<String> modeNames = [
    "DEFAULT_MODE"
  ];

  final List<String> tokenNames = [
    "'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
    "'\\u0006'", "'\\u0007'", "'\b'"
  ];

  final List<String> ruleNames = [
    "T__5", "T__4", "T__3", "T__2", "T__1", "T__0", "ID", "WS"
  ]; 
  	
  IfThenElseLexer(StringSource input) : super(input) {
    var _decisionToDfa = new List<Dfa>(atn.numberOfDecisions);
    for (int i = 0; i < atn.numberOfDecisions; i++) {
      _decisionToDfa[i] = new Dfa(atn.getDecisionState(i), i);
    }
    interpreter = new LexerAtnSimulator(atn, _decisionToDfa, sharedContextCache, this);
  }

  String get serializedAtn => _serializedAtn;

  String get grammarFileName => "IfThenElse.g";
}