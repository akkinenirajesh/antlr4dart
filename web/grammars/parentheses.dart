// Generated from Parentheses.g by antlr4dart
part of parentheses;

class Parentheses extends Lexer {

  static const int START_BLOCK = 1, ID = 2, SEPARATOR = 3;

  static const String _serializedAtn =  "\x03\u0430\ud6d1\u8206\uad2d\u4417"
  	"\uaef1\u8d80\uaadd\x02\x05\x2c\x08\x01\x04\x02\x09\x02\x04\x03\x09\x03"
  	"\x04\x04\x09\x04\x04\x05\x09\x05\x04\x06\x09\x06\x04\x07\x09\x07\x03"
  	"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03"
  	"\x03\x03\x03\x03\x03\x03\x06\x03\x1c\x0a\x03\x0d\x03\x0e\x03\x1d\x03"
  	"\x04\x03\x04\x05\x04\x22\x0a\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03"
  	"\x06\x03\x06\x03\x06\x03\x07\x03\x07\x02\x02\x08\x03\x03\x05\x04\x07"
  	"\x02\x09\x02\x0b\x02\x0d\x05\x03\x02\x02\x2a\x02\x03\x03\x02\x02\x02"
  	"\x02\x05\x03\x02\x02\x02\x02\x0d\x03\x02\x02\x02\x03\x0f\x03\x02\x02"
  	"\x02\x05\x15\x03\x02\x02\x02\x07\x21\x03\x02\x02\x02\x09\x23\x03\x02"
  	"\x02\x02\x0b\x26\x03\x02\x02\x02\x0d\x2a\x03\x02\x02\x02\x0f\x10\x07"
  	"\x2f\x02\x02\x10\x11\x07\x30\x02\x02\x11\x12\x07\x2f\x02\x02\x12\x13"
  	"\x07\x30\x02\x02\x13\x14\x07\x2f\x02\x02\x14\x04\x03\x02\x02\x02\x15"
  	"\x16\x05\x07\x04\x02\x16\x17\x05\x0d\x07\x02\x17\x1b\x03\x02\x02\x02"
  	"\x18\x19\x05\x07\x04\x02\x19\x1a\x05\x0d\x07\x02\x1a\x1c\x03\x02\x02"
  	"\x02\x1b\x18\x03\x02\x02\x02\x1c\x1d\x03\x02\x02\x02\x1d\x1b\x03\x02"
  	"\x02\x02\x1d\x1e\x03\x02\x02\x02\x1e\x06\x03\x02\x02\x02\x1f\x22\x05"
  	"\x09\x05\x02\x20\x22\x05\x0b\x06\x02\x21\x1f\x03\x02\x02\x02\x21\x20"
  	"\x03\x02\x02\x02\x22\x08\x03\x02\x02\x02\x23\x24\x07\x30\x02\x02\x24"
  	"\x25\x07\x2f\x02\x02\x25\x0a\x03\x02\x02\x02\x26\x27\x07\x2f\x02\x02"
  	"\x27\x28\x07\x30\x02\x02\x28\x29\x07\x2f\x02\x02\x29\x0c\x03\x02\x02"
  	"\x02\x2a\x2b\x07\x23\x02\x02\x2b\x0e\x03\x02\x02\x02\x05\x02\x1d\x21"
  	"\x02";

  final Atn atn = AtnSimulator.deserialize(_serializedAtn);

  final sharedContextCache = new PredictionContextCache();

  final List<String> modeNames = [
    "DEFAULT_MODE"
  ];

  final List<String> tokenNames = [
    "'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'"
  ];

  final List<String> ruleNames = [
    "START_BLOCK", "ID", "LETTER", "L_A", "L_K", "SEPARATOR"
  ]; 
  	
  Parentheses(StringSource input) : super(input) {
    var _decisionToDfa = new List<Dfa>(atn.numberOfDecisions);
    for (int i = 0; i < atn.numberOfDecisions; i++) {
      _decisionToDfa[i] = new Dfa(atn.getDecisionState(i), i);
    }
    interpreter = new LexerAtnSimulator(atn, _decisionToDfa, sharedContextCache, this);
  }

  String get serializedAtn => _serializedAtn;

  String get grammarFileName => "Parentheses.g";
}